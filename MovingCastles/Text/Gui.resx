<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Command_Interact" xml:space="preserve">
    <value>Keys:
(e), (Enter)

Brings up an overlay highlighting any adjacent objects that can be interacted with. Use the numpad to choose a direction, or (5) to choose the player's tile. If there is only one possible selection, pressing (e) or (Enter) again selects it.</value>
  </data>
  <data name="Command_Movement" xml:space="preserve">
    <value>Move with the numpad:

\ | /
- o -
/ | \

Tip:
The center of the numpad (5) is used for waiting.</value>
  </data>
  <data name="Command_Overview" xml:space="preserve">
    <value>Move with the numpad.
Rest with the middle of the numpad (5).
Interact with (e) or (Enter).

Mouse: (TODO)
Left-click to move and attack.
Right-click to inspect.</value>
  </data>
  <data name="Command_Wait" xml:space="preserve">
    <value>Keys:
(z), (5), (.)

Skip a turn.

Tip:
Wait to regain health or wait for the right time to strike, but remember that there is a limited amount of time in each day!</value>
  </data>
  <data name="Item_EtheriumShard_Desc" xml:space="preserve">
    <value>Crystalized by the precise artistry of master artificers, etherium is the closest thing you can get to the pure substance of the Torrent.</value>
  </data>
  <data name="Item_StarterOakStaff_Desc" xml:space="preserve">
    <value>Cut from the sacred woods of the Kurisau Oasis, this staff has served you since you first learned to sense the Wellspring.</value>
  </data>
  <data name="Item_SteelLongsword_Desc" xml:space="preserve">
    <value>The nobleman's weapon of war, with a well-used leather grip and a blade of the finest Ayeni steel.</value>
  </data>
  <data name="Item_TrollShroom_Desc" xml:space="preserve">
    <value>The Boletus Troglodytam or "Trollshroom" is the juvenile, fungal stage of the Common Cave Troll life-cycle. It has well-known endowment-enhancing properties, but can be quite dangerous to carry. Once uprooted, progress toward spawning is greatly accelerated, and can easily catch the unsuspecting harvester off guard.</value>
  </data>
  <data name="Spell_ConjureFlame_Desc" xml:space="preserve">
    <value>To manifest the power of the wellspring in flame is as natural as breath for the magi.</value>
  </data>
  <data name="Spell_EtherealStep_Desc" xml:space="preserve">
    <value>A most practical application of basic realmatic attunement. The magus steps briefly into the ethereal realm, utilizes a split second of mental movement, and re-enters the material plane at a nearby place.</value>
  </data>
  <data name="Spell_Fireball_Desc" xml:space="preserve">
    <value>A payload of raw fire, deftly contained in air. It explodes on impact.</value>
  </data>
  <data name="Spell_FreezingWind_Desc" xml:space="preserve">
    <value>The will of the magi evokes the frigid air of winter. A twisting beam of freezing wind shoots forth, driving the warmth of life from anything in its path.</value>
  </data>
  <data name="Spell_Haste_Desc" xml:space="preserve">
    <value>The bodies of mortals are but dust and water. Thus, a careful weaving of physical elements may push the flesh beyond its normal limits.</value>
  </data>
</root>